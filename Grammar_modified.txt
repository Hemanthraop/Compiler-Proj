<program> --> <moduleDeclarations> <otherModules><driverModule><otherModules>       
<moduleDeclarations>--> <moduleDeclaration><moduleDeclarations> | ε					
<moduleDeclaration> --> DECLARE MODULE ID SEMICOL									
<otherModules> --> <module><otherModules>| ε										
<driverModule> --> DRIVERDEF DRIVER PROGRAM DRIVERENDDEF <moduleDef>				
<module> -->DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC SEMICOL <ret><moduleDef> 
<ret> --> RETURNS SQBO <output_plist> SQBC SEMICOL | ε								
<input_plist> -->  ID COLON <dataType><input_plist'>  								
<input_plist'> --> COMMA ID COLON <dataType> <input_plist'> | ε
<output_plist> --> ID COLON <type><output_plist'>									
<output_plist'> -->  COMMA ID COLON <type><output_plist'> | ε						
<dataType> --> INTEGER | REAL | BOOLEAN | ARRAY SQBO <range> SQBC OF <type>
<range> -->NUM RANGEOP NUM								
<type> --> INTEGER | REAL | BOOLEAN													
<moduleDef> --> START <statements> END												
<statements> --><statement> <statements> | ε										
<statement> --><ioStmt>|<simpleStmt>|<declareStmt>|<condionalStmt>|<iterativeStmt>
<ioStmt> -->GET_VALUE BO ID BC SEMICOL | PRINT BO <var1> BC SEMICOL    															
<simpleStmt> --> <assignmentStmt> | <moduleReuseStmt>								
<assignmentStmt> --> ID <whichStmt>													
<whichStmt> --><lvalueIDStmt> | <lvalueARRStmt>										
<lvalueIDStmt> --> ASSIGNOP <expression> SEMICOL									
<lvalueARRStmt> --> SQBO <index> SQBC ASSIGNOP <expression> SEMICOL  				
<index> --> NUM | ID																
<moduleReuseStmt> --><optional> USE MODULE ID WITH PARAMETERS <idList>SEMICOL		
<optional> --> SQBO <idList> SQBC ASSIGNOP | ε										
<idList> --> ID COMMA <idList> | ID										
<expression> --> <arithmeticOrBooleanExpr> | <U>     				
<U> --> <unary_op> <new_NT>  																									
<new_NT> --> BO <arithmeticExpr> BC | <var_id_num>
<var_id_num> --> ID <whichId> | NUM | RNUM
<whichId> --> SQBO <index> SQBC | ε		
<unary_op> --> PLUS | MINUS
<arithmeticOrBooleanExpr> --> <AnyTerm> <N7>
<N7> --> <logicalOp> <AnyTerm> <N7> | ε
<AnyTerm> --> <arithmeticExpr> <N8> | <boolConstt>        
<N8> --> <relationalOp> <arithmeticExpr> | ε
<arithmeticExpr> --><term> <A1>														
<A1> --><op1><term><A1> | ε																	
<term> --><factor> <A2>																
<A2> --><op2><factor><A2> | ε													
<factor> -->BO <arithmeticExpr> BC													
<factor> --> <var_id_num>
<logicalOp> -->AND | OR																
<relationalOp> --> LT | LE | GT | GE | EQ | NE										
<declareStmt> --> DECLARE <idList> COLON <dataType> SEMICOL							
<condionalStmt> -->SWITCH BO ID BC START <caseStmt><default> END					
<caseStmt> -->CASE <value> COLON <statements> BREAK SEMICOL <caseStmt'>	
<casestmt'> --> CASE <value> COLON <statements> BREAK SEMICOL <casestmt'> | ε		
<value> -->NUM | TRUE | FALSE														
<default> -->DEFAULT COLON <statements> BREAK SEMICOL | ε                           
<iterativeStmt> -->FOR BO ID IN <range> BC START <statements> END | WHILE BO <arithmaticOrBooleanExpr> BC START <statements> END    										
<op1> -->PLUS | MINUS																
<op2> -->MUL | DIV																	
<var> --> <var_id_num> | <boolConstt>		
<boolConstt> --> TRUE | FALSE												
