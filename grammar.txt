<program> --> <moduleDeclarations> <otherModules><driverModule><otherModules>
<moduleDeclarations>--> <moduleDeclaration><moduleDeclarations> | ε
<moduleDeclaration> --> DECLARE MODULE ID SEMICOL
<otherModules> --> <module><otherModules>| ε
<driverModule> --> DRIVERDEF DRIVER PROGRAM DRIVERENDDEF <moduleDef>
<module> -->DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC SEMICOL <ret><moduleDef>
<ret> --> RETURNS SQBO <output_plist> SQBC SEMICOL | ε
<input_plist> --> <input_plist> COMMA ID COLON <dataType> | ID COLON <dataType>//Left Rec
<output_plist> --> <output_plist> COMMA ID COLON <type> | ID COLON <type>//Left Rec
<dataType> --> INTEGER | REAL | BOOLEAN | ARRAY SQBO <range> SQBC OF <type>
<type> --> INTEGER | REAL | BOOLEAN
<moduleDef> --> START <statements> END
<statements> --><statement> <statements> | ε
<statement> --><ioStmt>|<simpleStmt>|<declareStmt>|<condionalStmt>|<iterativeStmt>
<ioStmt> -->GET_VALUE BO ID BC SEMICOL | PRINT BO <var1> BC SEMICOL
<var> --> ID <whichId> | NUM | RNUM
<whichId> --> SQBO <index> SQBC | ε//<whichId> --> SQBO ID SQBC | ε
<simpleStmt> --> <assignmentStmt> | <moduleReuseStmt>
<assignmentStmt> --> ID <whichStmt>
<whichStmt> --><lvalueIDStmt> | <lvalueARRStmt>
<lvalueIDStmt> --> ASSIGNOP <expression> SEMICOL
<lvalueARRStmt> --> SQBO <index> SQBC ASSIGNOP <expression> SEMICOL
<index> --> NUM | ID
<moduleReuseStmt> --><optional> USE MODULE ID WITH PARAMETERS <idList>SEMICOL
<optional> --> SQBO <idList> SQBC ASSIGNOP | ε
<idList> --> <idList> COMMA ID | ID//Left Rec
<expression> --><arithmeticExpr> | <booleanExpr>
<arithmeticExpr> --><arithmeticExpr> <op1> <term>//<arithmeticExpr> --><arithmeticExpr> <op> <term>
<arithmeticExpr> --><term>
<term> --><term> <op2> <factor'>//<term> --><term> <op> <factor>
<term> --><factor'>
<factor'> --><op1> <factor> | <factor>
<factor> -->BO <arithmeticExpr> BC
<factor> --> <var>
//<op> --> PLUS | MINUS | MUL | DIV
<booleanExpr> --><booleanExpr> <logicalOp> <booleanExpr> | TRUE | FALSE //<booleanExpr> --><booleanExpr> <logicalOp> <booleanExpr>
<logicalOp> -->AND | OR
<booleanExpr> --><arithmeticExpr> <relationalOp> <arithmeticExpr>
<booleanExpr> --> BO <booleanExpr> BC
<relationalOp> --> LT | LE | GT | GE | EQ | NE
<declareStmt> --> DECLARE <idList> COLON <dataType> SEMICOL
<condionalStmt> -->SWITCH BO ID BC START <caseStmt><default> END
<caseStmt> -->CASE <value> COLON <statements> BREAK SEMICOL <caseStmt> | CASE <value> COLON <statements> BREAK SEMICOL//changed one
<value> -->NUM | TRUE | FALSE
<default> -->DEFAULT COLON <statements> BREAK SEMICOL | ε
<iterativeStmt> -->FOR BO ID IN <range> BC START <statements> END | WHILE BO <booleanExpr> BC START <statements> END
<range> -->NUM RANGEOP NUM

<op1> -->PLUS | MINUS
<op2> -->MUL | DIV
<var1> --> <var> | TRUE | FALSE
